// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: proto/hydrology_control_service.proto

package HL_ControlService_Go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HydrologyControlService_Create_FullMethodName      = "/hydrologycontrol.HydrologyControlService/Create"
	HydrologyControlService_Delete_FullMethodName      = "/hydrologycontrol.HydrologyControlService/Delete"
	HydrologyControlService_Update_FullMethodName      = "/hydrologycontrol.HydrologyControlService/Update"
	HydrologyControlService_Get_FullMethodName         = "/hydrologycontrol.HydrologyControlService/Get"
	HydrologyControlService_CheckValue_FullMethodName  = "/hydrologycontrol.HydrologyControlService/CheckValue"
	HydrologyControlService_GetDate_FullMethodName     = "/hydrologycontrol.HydrologyControlService/GetDate"
	HydrologyControlService_GetInterval_FullMethodName = "/hydrologycontrol.HydrologyControlService/GetInterval"
)

// HydrologyControlServiceClient is the client API for HydrologyControlService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HydrologyControlServiceClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	CheckValue(ctx context.Context, in *CheckValueRequest, opts ...grpc.CallOption) (*CheckValueResponse, error)
	GetDate(ctx context.Context, in *GetDateRequest, opts ...grpc.CallOption) (*GetDateResponse, error)
	GetInterval(ctx context.Context, in *GetIntervalRequest, opts ...grpc.CallOption) (*GetIntervalResponse, error)
}

type hydrologyControlServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHydrologyControlServiceClient(cc grpc.ClientConnInterface) HydrologyControlServiceClient {
	return &hydrologyControlServiceClient{cc}
}

func (c *hydrologyControlServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, HydrologyControlService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydrologyControlServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, HydrologyControlService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydrologyControlServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, HydrologyControlService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydrologyControlServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, HydrologyControlService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydrologyControlServiceClient) CheckValue(ctx context.Context, in *CheckValueRequest, opts ...grpc.CallOption) (*CheckValueResponse, error) {
	out := new(CheckValueResponse)
	err := c.cc.Invoke(ctx, HydrologyControlService_CheckValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydrologyControlServiceClient) GetDate(ctx context.Context, in *GetDateRequest, opts ...grpc.CallOption) (*GetDateResponse, error) {
	out := new(GetDateResponse)
	err := c.cc.Invoke(ctx, HydrologyControlService_GetDate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydrologyControlServiceClient) GetInterval(ctx context.Context, in *GetIntervalRequest, opts ...grpc.CallOption) (*GetIntervalResponse, error) {
	out := new(GetIntervalResponse)
	err := c.cc.Invoke(ctx, HydrologyControlService_GetInterval_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HydrologyControlServiceServer is the server API for HydrologyControlService service.
// All implementations must embed UnimplementedHydrologyControlServiceServer
// for forward compatibility
type HydrologyControlServiceServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	CheckValue(context.Context, *CheckValueRequest) (*CheckValueResponse, error)
	GetDate(context.Context, *GetDateRequest) (*GetDateResponse, error)
	GetInterval(context.Context, *GetIntervalRequest) (*GetIntervalResponse, error)
	mustEmbedUnimplementedHydrologyControlServiceServer()
}

// UnimplementedHydrologyControlServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHydrologyControlServiceServer struct {
}

func (UnimplementedHydrologyControlServiceServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedHydrologyControlServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedHydrologyControlServiceServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedHydrologyControlServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedHydrologyControlServiceServer) CheckValue(context.Context, *CheckValueRequest) (*CheckValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckValue not implemented")
}
func (UnimplementedHydrologyControlServiceServer) GetDate(context.Context, *GetDateRequest) (*GetDateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDate not implemented")
}
func (UnimplementedHydrologyControlServiceServer) GetInterval(context.Context, *GetIntervalRequest) (*GetIntervalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInterval not implemented")
}
func (UnimplementedHydrologyControlServiceServer) mustEmbedUnimplementedHydrologyControlServiceServer() {
}

// UnsafeHydrologyControlServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HydrologyControlServiceServer will
// result in compilation errors.
type UnsafeHydrologyControlServiceServer interface {
	mustEmbedUnimplementedHydrologyControlServiceServer()
}

func RegisterHydrologyControlServiceServer(s grpc.ServiceRegistrar, srv HydrologyControlServiceServer) {
	s.RegisterService(&HydrologyControlService_ServiceDesc, srv)
}

func _HydrologyControlService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydrologyControlServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HydrologyControlService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydrologyControlServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydrologyControlService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydrologyControlServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HydrologyControlService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydrologyControlServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydrologyControlService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydrologyControlServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HydrologyControlService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydrologyControlServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydrologyControlService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydrologyControlServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HydrologyControlService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydrologyControlServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydrologyControlService_CheckValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydrologyControlServiceServer).CheckValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HydrologyControlService_CheckValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydrologyControlServiceServer).CheckValue(ctx, req.(*CheckValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydrologyControlService_GetDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydrologyControlServiceServer).GetDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HydrologyControlService_GetDate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydrologyControlServiceServer).GetDate(ctx, req.(*GetDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydrologyControlService_GetInterval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIntervalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydrologyControlServiceServer).GetInterval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HydrologyControlService_GetInterval_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydrologyControlServiceServer).GetInterval(ctx, req.(*GetIntervalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HydrologyControlService_ServiceDesc is the grpc.ServiceDesc for HydrologyControlService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HydrologyControlService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hydrologycontrol.HydrologyControlService",
	HandlerType: (*HydrologyControlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _HydrologyControlService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _HydrologyControlService_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _HydrologyControlService_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _HydrologyControlService_Get_Handler,
		},
		{
			MethodName: "CheckValue",
			Handler:    _HydrologyControlService_CheckValue_Handler,
		},
		{
			MethodName: "GetDate",
			Handler:    _HydrologyControlService_GetDate_Handler,
		},
		{
			MethodName: "GetInterval",
			Handler:    _HydrologyControlService_GetInterval_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/hydrology_control_service.proto",
}
